{"version":3,"sources":["AutocompleteAddress/InputAddressForm/InputAddressForm.tsx","AutocompleteAddress/SuccessSnackBar/SuccessSnackBar.tsx","AutocompleteAddress/AutocompleteAddress.tsx","AutocompleteAddress/HelperFunctions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["validationSchema","yup","street","required","home","district","locality","area","region","country","InputForm","props","formik","useFormik","initialValues","state","onSubmit","values","resetForm","setAddress","setIsSelectAddress","handleSubmit","TextField","name","value","placeholder","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","type","Alert","elevation","variant","SuccessSnackBar","useState","isOpen","setIsOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","text","StyledTextField","styled","StyledSpan","div","ErrorInputMessage","AutocompleteAddress","autocomplete","setState","isEdit","setIsEdit","isSelectAddress","address","errorAddress","setErrorAddress","useEffect","google","maps","places","Autocomplete","document","getElementById","addListener","handlePlaceSelect","removeEventListener","addressObject","getPlace","address_components","stateWithAddress","NewAddressState","component","types","long_name","getNewAddressState","ThemeProvider","theme","id","color","onClick","StyledApp","createMuiTheme","palette","primary","main","purple","secondary","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2QAaMA,EAAmBC,IAAW,CAChCC,OAAQD,MAEHE,SAAS,kMACdC,KAAMH,MAEDE,SAAS,kMACdE,SAAUJ,MAELE,SAAS,kMACdG,SAAUL,MAELE,SAAS,kMACdI,KAAMN,MAEDE,SAAS,kMACdK,OAAQP,MAEHE,SAAS,kMACdM,QAASR,MAEJE,SAAS,oMAELO,EAAY,SAACC,GAEtB,IAAMC,EAASC,YAAU,CACrBC,cAAeH,EAAMI,MACrBf,iBAAkBA,EAClBgB,SAAU,SAAAC,GACNL,EAAOM,YACPP,EAAMQ,WAAN,kIAA6CP,EAAOK,OAAOX,SAA3D,6CAA+EM,EAAOK,OAAOf,OAA7F,+CACQU,EAAOK,OAAOb,OACtBO,EAAMS,oBAAmB,MAIjC,OACI,8BACI,uBAAMJ,SAAUJ,EAAOS,aAAvB,UACI,8BAAK,cAACC,EAAA,EAAD,CACDC,KAAM,SACNC,MAAOZ,EAAOK,OAAOf,OACrBuB,YAAa,iCACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQ3B,QAAU4B,QAAQlB,EAAOmB,OAAO7B,QACtD8B,WAAYpB,EAAOiB,QAAQ3B,QAAUU,EAAOmB,OAAO7B,WAEvD,8BAAK,cAACoB,EAAA,EAAD,CACDC,KAAM,OACNC,MAAOZ,EAAOK,OAAOb,KACrBqB,YAAa,qBACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQzB,MAAQ0B,QAAQlB,EAAOmB,OAAO3B,MACpD4B,WAAYpB,EAAOiB,QAAQzB,MAAQQ,EAAOmB,OAAO3B,SAErD,8BAAK,cAACkB,EAAA,EAAD,CACDC,KAAM,WACNC,MAAOZ,EAAOK,OAAOZ,SACrBoB,YAAa,iCACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQxB,UAAYyB,QAAQlB,EAAOmB,OAAO1B,UACxD2B,WAAYpB,EAAOiB,QAAQxB,UAAYO,EAAOmB,OAAO1B,aAEzD,8BAAK,cAACiB,EAAA,EAAD,CACDC,KAAM,WACNC,MAAOZ,EAAOK,OAAOX,SACrBmB,YAAa,iCACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQvB,UAAYwB,QAAQlB,EAAOmB,OAAOzB,UACxD0B,WAAYpB,EAAOiB,QAAQvB,UAAYM,EAAOmB,OAAOzB,aAEzD,8BAAK,cAACgB,EAAA,EAAD,CACDC,KAAM,OACNC,MAAOZ,EAAOK,OAAOV,KACrBkB,YAAa,iCACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQtB,MAAQuB,QAAQlB,EAAOmB,OAAOxB,MACpDyB,WAAYpB,EAAOiB,QAAQtB,MAAQK,EAAOmB,OAAOxB,SAErD,8BAAK,cAACe,EAAA,EAAD,CACDC,KAAM,SACNC,MAAOZ,EAAOK,OAAOT,OACrBiB,YAAa,6CACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQrB,QAAUsB,QAAQlB,EAAOmB,OAAOvB,QACtDwB,WAAYpB,EAAOiB,QAAQrB,QAAUI,EAAOmB,OAAOvB,WAGvD,8BAAK,cAACc,EAAA,EAAD,CACDC,KAAM,UACNC,MAAOZ,EAAOK,OAAOR,QACrBgB,YAAa,iCACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOiB,QAAQpB,SAAWqB,QAAQlB,EAAOmB,OAAOtB,SACvDuB,WAAYpB,EAAOiB,QAAQpB,SAAWG,EAAOmB,OAAOtB,YAExD,cAACwB,EAAA,EAAD,CAAQC,KAAK,SAAb,kD,4CCzGhB,SAASC,EAAMxB,GACX,OAAO,cAAC,IAAD,aAAUyB,UAAW,GAAIC,QAAQ,UAAa1B,IAGlD,SAAS2B,EAAgB3B,GAAuB,IAAD,EACvB4B,oBAAkB,GADK,mBAC3CC,EAD2C,KACnCC,EADmC,KAG5CC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJH,GAAU,IAGd,OACI,cAACI,EAAA,EAAD,CAAUC,KAAMN,EAAQO,iBAAkB,IAAMC,QAASN,EAAzD,SACI,cAAC,EAAD,CAAOM,QAASN,EAAaO,SAAS,UAAtC,SACKtC,EAAMuC,S,qBCFjBC,EAAkBC,YAAO9B,IAAP8B,CAAH,6CAGfC,EAAaD,IAAOE,IAAV,iDAGVC,EAAoBH,IAAOE,IAAV,0CAkERE,EA7Da,SAAC7C,GAAoC,IASzD8C,EATwD,EAClClB,mBAAwB,CAC9CrC,OAAQ,GAAIE,KAAM,GAAIC,SAAU,GAAIC,SAAU,GAAIC,KAAM,GAAIC,OAAQ,GAAIC,QAAS,KAFzB,mBACrDM,EADqD,KAC9C2C,EAD8C,OAIhCnB,oBAAkB,GAJc,mBAIrDoB,EAJqD,KAI7CC,EAJ6C,OAKdrB,oBAAkB,GALJ,mBAKrDsB,EALqD,KAKpCzC,EALoC,OAM9BmB,mBAAiB,IANa,mBAMrDuB,EANqD,KAM5C3C,EAN4C,OAOpBoB,mBAAiB,IAPG,mBAOrDwB,EAPqD,KAOvCC,EAPuC,KAW5DC,qBAAU,WAKN,OAHAR,EAAe,IAAIS,OAAOC,KAAKC,OAAOC,aAAaC,SAASC,eAAe,gBAAiB,KAC/EC,YAAY,gBAAiBC,GAEnC,kBAAMhB,EAAaiB,oBAAoB,gBAAiBD,MAChE,IAGH,IAAMA,EAAoB,WAEtB,IAAIE,EAAgBlB,EAAamB,WACjC,GAAID,EAAcE,mBAAoB,CAClC,IAAMC,ECtDc,SAACH,GAC7B,IADkD,EAC9CI,EAAkB,CAAC7E,OAAQ,GAAIE,KAAM,GAAIC,SAAU,GAAIC,SAAU,GAAIC,KAAM,GAAIC,OAAQ,GAAIC,QAAS,IADtD,cAG1BkE,EAAcE,oBAHY,IAGlD,2BAAoG,CAAC,IAA1FG,EAAyF,QAEpG,OAD0BA,EAAUC,MAAM,IAEtC,IAAK,gBACDF,EAAgB3E,KAAO4E,EAAUE,UACjC,MAEJ,IAAK,QAEDH,EAAgB7E,OAAS8E,EAAUE,UACnC,MAEJ,IAAK,sBACDH,EAAgB1E,SAAW2E,EAAUE,UACrC,MAEJ,IAAK,WACDH,EAAgBzE,SAAW0E,EAAUE,UACrC,MAEJ,IAAK,8BACDH,EAAgBxE,KAAOyE,EAAUE,UACjC,MAEJ,IAAK,8BACDH,EAAgBvE,OAASwE,EAAUE,UACnC,MAEJ,IAAK,UACDH,EAAgBtE,QAAUuE,EAAUE,YAhCM,8BAqCtD,OAAOH,EDiB8BI,CAAmBR,GAC5CjB,EAAS,2BAAI3C,GAAU+D,IACvB1D,GAAmB,QAChB4C,EAAgB,6LAW3B,OACI,cAACoB,EAAA,EAAD,CAAeC,MAAO1E,EAAM0E,MAA5B,SACI,gCACI,iDACA,cAAClC,EAAD,CAAiBmC,GAAG,eACHC,MAAM,YACNlD,QAAQ,WACRH,KAAK,OACLR,SAdP,WAClBN,GAAmB,GACnB4C,EAAgB,IAChBJ,GAAU,GACVzC,EAAW,OAYH,eAACoC,EAAD,eAAqBQ,KACpBF,GAAmB,gCAChB,cAACR,EAAD,4NADgB,IACkD,eAACpB,EAAA,EAAD,CAClEuD,QAtBK,WACjB5B,GAAWD,IAoBmE,UAC3C,cAAC,IAAD,IAD2C,oFAEjEA,GACD,cAAC,EAAD,CAAWxC,WAAYA,EAAYC,mBAAoBA,EAAoBL,MAAOA,OAErF+C,GAAW,cAACxB,EAAD,CAAiBY,KAAMY,U,kBE9E7C2B,EAAYrC,IAAOE,IAAV,uDAIT+B,EAAQK,YAAe,CACzBC,QAAS,CACLC,QAAS,CAELC,KAAMC,IAAO,MAEjBC,UAAW,CAEPF,KAAM,cAgBHG,MATf,WAEI,OACI,cAACP,EAAD,UACI,cAAC,EAAD,CAAqBJ,MAAOA,OChBzBY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,SAM1B0B,M","file":"static/js/main.5394004e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {initStateType} from \"../AutocompleteAddress\";\r\nimport * as yup from 'yup';\r\n\r\n\r\ntype InputFormPropsType = {\r\n    state: initStateType\r\n    setIsSelectAddress: (selectAddress: boolean) => void\r\n    setAddress: (address: string) => void\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n    street: yup\r\n        .string()\r\n        .required('это поле обязательно для заполнения'),\r\n    home: yup\r\n        .string()\r\n        .required('это поле обязательно для заполнения'),\r\n    district: yup\r\n        .string()\r\n        .required('это поле обязательно для заполнения'),\r\n    locality: yup\r\n        .string()\r\n        .required('это поле обязательно для заполнения'),\r\n    area: yup\r\n        .string()\r\n        .required('это поле обязательно для заполнения'),\r\n    region: yup\r\n        .string()\r\n        .required('это поле обязательно для заполнения'),\r\n    country: yup\r\n        .string()\r\n        .required('это поле обязательно для заполнения'),\r\n});\r\nexport const InputForm = (props: InputFormPropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: props.state,\r\n        validationSchema: validationSchema,\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            props.setAddress(`вы выбрали адрес- город: ${formik.values.locality}, улица: ${formik.values.street},\r\n             дом: ${formik.values.home}`)\r\n            props.setIsSelectAddress(false)\r\n            // и отправляем адрес в стейт\r\n        }\r\n    })\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div><TextField\r\n                    name={\"street\"}\r\n                    value={formik.values.street}\r\n                    placeholder={\"Улица\"}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.street && Boolean(formik.errors.street)}\r\n                    helperText={formik.touched.street && formik.errors.street}\r\n                /></div>\r\n                <div><TextField\r\n                    name={\"home\"}\r\n                    value={formik.values.home}\r\n                    placeholder={\"дом\"}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.home && Boolean(formik.errors.home)}\r\n                    helperText={formik.touched.home && formik.errors.home}\r\n                /></div>\r\n                <div><TextField\r\n                    name={\"district\"}\r\n                    value={formik.values.district}\r\n                    placeholder={\"Район\"}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.district && Boolean(formik.errors.district)}\r\n                    helperText={formik.touched.district && formik.errors.district}\r\n                /></div>\r\n                <div><TextField\r\n                    name={\"locality\"}\r\n                    value={formik.values.locality}\r\n                    placeholder={\"Город\"}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.locality && Boolean(formik.errors.locality)}\r\n                    helperText={formik.touched.locality && formik.errors.locality}\r\n                /></div>\r\n                <div><TextField\r\n                    name={\"area\"}\r\n                    value={formik.values.area}\r\n                    placeholder={\"Район\"}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.area && Boolean(formik.errors.area)}\r\n                    helperText={formik.touched.area && formik.errors.area}\r\n                /></div>\r\n                <div><TextField\r\n                    name={\"region\"}\r\n                    value={formik.values.region}\r\n                    placeholder={\"Область\"}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.region && Boolean(formik.errors.region)}\r\n                    helperText={formik.touched.region && formik.errors.region}\r\n                /></div>\r\n\r\n                <div><TextField\r\n                    name={\"country\"}\r\n                    value={formik.values.country}\r\n                    placeholder={\"Стран\"}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.country && Boolean(formik.errors.country)}\r\n                    helperText={formik.touched.country && formik.errors.country}\r\n                /></div>\r\n                <Button type=\"submit\">Далее</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={15} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function SuccessSnackBar(props:{text: string}) {\r\n    const [isOpen, setIsOpen] =useState<boolean>(true)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setIsOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"success\">\r\n                {props.text}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Button, TextField, Theme} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {InputForm} from \"./InputAddressForm/InputAddressForm\";\r\nimport {getNewAddressState} from \"./HelperFunctions\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {SuccessSnackBar} from \"./SuccessSnackBar/SuccessSnackBar\";\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\n\r\nexport type initStateType = {\r\n    street: string,\r\n    home: string,\r\n    district: string\r\n    locality: string\r\n    area: string\r\n    region: string\r\n    country: string\r\n\r\n}\r\nconst StyledTextField = styled(TextField)`\r\n  width: 500px;\r\n`\r\nconst StyledSpan = styled.div`\r\n  font-size: medium\r\n`\r\nconst ErrorInputMessage = styled.div`\r\n  color: red\r\n`\r\ntype AutocompleteAddressType = { theme: Theme }\r\n\r\nconst AutocompleteAddress = (props: AutocompleteAddressType) => {\r\n    const [state, setState] = useState<initStateType>({\r\n        street: \"\", home: \"\", district: \"\", locality: \"\", area: \"\", region: \"\", country: \"\"\r\n    })\r\n    const [isEdit, setIsEdit] = useState<boolean>(false)\r\n    const [isSelectAddress, setIsSelectAddress] = useState<boolean>(false)\r\n    const [address, setAddress] = useState<string>(\"\")\r\n    const [errorAddress, setErrorAddress] = useState<string>(\"\")\r\n\r\n    let autocomplete:any\r\n\r\n    useEffect(() => {\r\n          // @ts-ignore\r\n        autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), {})\r\n        autocomplete.addListener(\"place_changed\", handlePlaceSelect)\r\n\r\n        return () => autocomplete.removeEventListener(\"place_changed\", handlePlaceSelect);\r\n    }, [])\r\n\r\n\r\n    const handlePlaceSelect = () => {\r\n        // @ts-ignore\r\n        let addressObject = autocomplete.getPlace()\r\n        if (addressObject.address_components) {\r\n            const stateWithAddress = getNewAddressState(addressObject)\r\n            setState({...state, ...stateWithAddress})\r\n            setIsSelectAddress(true)\r\n        } else setErrorAddress(\"Необходимо выбрать адрес из списка\")\r\n    }\r\n    const handleRedact = () => {\r\n        setIsEdit(!isEdit)\r\n    }\r\n    const onChangeInput = () => {\r\n        setIsSelectAddress(false)\r\n        setErrorAddress(\"\")\r\n        setIsEdit(false)\r\n        setAddress(\"\")\r\n    }\r\n    return (\r\n        <ThemeProvider theme={props.theme}>\r\n            <div>\r\n                <h1>Add New Address</h1>\r\n                <StyledTextField id=\"autocomplete\"\r\n                                 color=\"secondary\"\r\n                                 variant=\"outlined\"\r\n                                 type=\"text\"\r\n                                 onChange={onChangeInput}\r\n                />\r\n                <ErrorInputMessage> {errorAddress}</ErrorInputMessage>\r\n                {isSelectAddress && <div>\r\n                    <StyledSpan> вы выбрали разбитый по структуре адрес </StyledSpan> <Button\r\n                    onClick={handleRedact}><EditIcon/>редактировать</Button>\r\n                    {isEdit &&\r\n                    <InputForm setAddress={setAddress} setIsSelectAddress={setIsSelectAddress} state={state}/>}\r\n                </div>}\r\n                {address && <SuccessSnackBar text={address}/>}\r\n            </div>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default AutocompleteAddress;\r\n\r\n","export const getNewAddressState=(addressObject:any)=> {\r\n    let NewAddressState = {street: \"\", home: \"\", district: \"\", locality: \"\", area: \"\", region: \"\", country: \"\",}\r\n    // @ts-ignore\r\n    for (const component of addressObject.address_components as google.maps.GeocoderAddressComponent[]) {\r\n        const componentType = component.types[0];\r\n    switch (componentType) {\r\n        case \"street_number\": {\r\n            NewAddressState.home = component.long_name\r\n            break;\r\n        }\r\n        case \"route\": {\r\n\r\n            NewAddressState.street = component.long_name\r\n            break;\r\n        }\r\n        case \"sublocality_level_1\": {\r\n            NewAddressState.district = component.long_name\r\n            break;\r\n        }\r\n        case \"locality\": {\r\n            NewAddressState.locality = component.long_name\r\n            break;\r\n        }\r\n        case \"administrative_area_level_2\": {\r\n            NewAddressState.area = component.long_name\r\n            break;\r\n        }\r\n        case \"administrative_area_level_1\": {\r\n            NewAddressState.region = component.long_name\r\n            break;\r\n        }\r\n        case \"country\": {\r\n            NewAddressState.country = component.long_name\r\n            break;\r\n        }\r\n    }\r\n}\r\nreturn NewAddressState\r\n}","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport AutocompleteAddress from \"./AutocompleteAddress/AutocompleteAddress\";\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport {purple} from \"@material-ui/core/colors\";\r\n\r\n\r\nconst StyledApp = styled.div`\r\n  text-align: center;\r\n  \r\n`\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            // Purple and green play nicely together.\r\n            main: purple[300],\r\n        },\r\n        secondary: {\r\n            // This is green.A700 as hex.\r\n            main: '#11cb5f',\r\n        },\r\n\r\n    },\r\n});\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <StyledApp>\r\n            <AutocompleteAddress theme={theme} />\r\n        </StyledApp>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}