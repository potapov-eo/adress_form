{"version":3,"sources":["AutocompleteAddress/InputAddressForm/InputAddressForm.tsx","AutocompleteAddress/SuccessSnackBar/SuccessSnackBar.tsx","AutocompleteAddress/AutocompleteAddress.tsx","AutocompleteAddress/HelperFunctions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["validationSchema","yup","street","required","home","district","locality","area","region","country","InputForm","props","formik","useFormik","initialValues","state","onSubmit","values","resetForm","setAddress","setIsSelectAddress","handleSubmit","TextField","name","value","placeholder","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","type","Alert","elevation","variant","SuccessSnackBar","useState","isOpen","setIsOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","text","StyledTextField","styled","StyledSpan","div","ErrorInputMessage","AutocompleteAddress","autocomplete","setState","isEdit","setIsEdit","isSelectAddress","address","errorAddress","setErrorAddress","useEffect","google","maps","places","Autocomplete","document","getElementById","addListener","handlePlaceSelect","addressObject","getPlace","address_components","stateWithAddress","NewAddressState","component","types","long_name","getNewAddressState","ThemeProvider","theme","id","color","onClick","StyledApp","createMuiTheme","palette","primary","main","purple","secondary","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4862ec75.chunk.js","sourcesContent":["import React from 'react'\nimport {useFormik} from \"formik\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {initStateType} from \"../AutocompleteAddress\";\nimport * as yup from 'yup';\n\n\ntype InputFormPropsType = {\n    state: initStateType\n    setIsSelectAddress: (selectAddress: boolean) => void\n    setAddress: (address: string) => void\n}\n\nconst validationSchema = yup.object({\n    street: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n    home: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n    district: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n    locality: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n    area: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n    region: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n    country: yup\n        .string()\n        .required('это поле обязательно для заполнения'),\n});\nexport const InputForm = (props: InputFormPropsType) => {\n\n    const formik = useFormik({\n        initialValues: props.state,\n        validationSchema: validationSchema,\n        onSubmit: values => {\n            formik.resetForm()\n            props.setAddress(`вы выбрали адрес- город: ${formik.values.locality}, улица: ${formik.values.street},\n             дом: ${formik.values.home}`)\n            props.setIsSelectAddress(false)\n            // и отправляем адрес в стейт\n        }\n    })\n    return (\n        <div>\n            <form onSubmit={formik.handleSubmit}>\n                <div><TextField\n                    name={\"street\"}\n                    value={formik.values.street}\n                    placeholder={\"Улица\"}\n                    onChange={formik.handleChange}\n                    error={formik.touched.street && Boolean(formik.errors.street)}\n                    helperText={formik.touched.street && formik.errors.street}\n                /></div>\n                <div><TextField\n                    name={\"home\"}\n                    value={formik.values.home}\n                    placeholder={\"дом\"}\n                    onChange={formik.handleChange}\n                    error={formik.touched.home && Boolean(formik.errors.home)}\n                    helperText={formik.touched.home && formik.errors.home}\n                /></div>\n                <div><TextField\n                    name={\"district\"}\n                    value={formik.values.district}\n                    placeholder={\"Район\"}\n                    onChange={formik.handleChange}\n                    error={formik.touched.district && Boolean(formik.errors.district)}\n                    helperText={formik.touched.district && formik.errors.district}\n                /></div>\n                <div><TextField\n                    name={\"locality\"}\n                    value={formik.values.locality}\n                    placeholder={\"Город\"}\n                    onChange={formik.handleChange}\n                    error={formik.touched.locality && Boolean(formik.errors.locality)}\n                    helperText={formik.touched.locality && formik.errors.locality}\n                /></div>\n                <div><TextField\n                    name={\"area\"}\n                    value={formik.values.area}\n                    placeholder={\"Район\"}\n                    onChange={formik.handleChange}\n                    error={formik.touched.area && Boolean(formik.errors.area)}\n                    helperText={formik.touched.area && formik.errors.area}\n                /></div>\n                <div><TextField\n                    name={\"region\"}\n                    value={formik.values.region}\n                    placeholder={\"Область\"}\n                    onChange={formik.handleChange}\n                    error={formik.touched.region && Boolean(formik.errors.region)}\n                    helperText={formik.touched.region && formik.errors.region}\n                /></div>\n\n                <div><TextField\n                    name={\"country\"}\n                    value={formik.values.country}\n                    placeholder={\"Стран\"}\n                    onChange={formik.handleChange}\n                    error={formik.touched.country && Boolean(formik.errors.country)}\n                    helperText={formik.touched.country && formik.errors.country}\n                /></div>\n                <Button type=\"submit\">Далее</Button>\n            </form>\n        </div>\n    )\n}\n\n","import React, {useState} from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={15} variant=\"filled\" {...props} />;\n}\n\nexport function SuccessSnackBar(props:{text: string}) {\n    const [isOpen, setIsOpen] =useState<boolean>(true)\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setIsOpen(false);\n    };\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"success\">\n                {props.text}\n            </Alert>\n        </Snackbar>\n    );\n}","import React, {useEffect, useState} from 'react'\nimport {Button, TextField, Theme} from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport {InputForm} from \"./InputAddressForm/InputAddressForm\";\nimport {getNewAddressState} from \"./HelperFunctions\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport {SuccessSnackBar} from \"./SuccessSnackBar/SuccessSnackBar\";\nimport {ThemeProvider} from '@material-ui/core/styles';\n\nexport type initStateType = {\n    street: string,\n    home: string,\n    district: string\n    locality: string\n    area: string\n    region: string\n    country: string\n\n}\nconst StyledTextField = styled(TextField)`\n  width: 500px;\n`\nconst StyledSpan = styled.div`\n  font-size: medium\n`\nconst ErrorInputMessage = styled.div`\n  color: red\n`\ntype AutocompleteAddressType = { theme: Theme }\n\nconst AutocompleteAddress = (props: AutocompleteAddressType) => {\n    const [state, setState] = useState<initStateType>({\n        street: \"\", home: \"\", district: \"\", locality: \"\", area: \"\", region: \"\", country: \"\" })\n    const [isEdit, setIsEdit] = useState<boolean>(false)\n    const [isSelectAddress, setIsSelectAddress] = useState<boolean>(false)\n    const [address, setAddress] = useState<string>(\"\")\n    const [errorAddress, setErrorAddress] = useState<string>(\"\")\n// @ts-ignore\n    let autocomplete\n\n    useEffect(() => {\n        // @ts-ignore\n        autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), {})\n        autocomplete.addListener(\"place_changed\", handlePlaceSelect)\n    }, [])\n\n\n\n    const handlePlaceSelect = () => {\n        // @ts-ignore\n        let addressObject = autocomplete.getPlace()\n        if (addressObject.address_components) {\n            const stateWithAddress = getNewAddressState(addressObject)\n            setState({...state, ...stateWithAddress})\n            setIsSelectAddress(true)\n        } else setErrorAddress(\"Необходимо выбрать адрес из списка\")\n    }\n    const handleRedact = () => {\n        setIsEdit(!isEdit)\n    }\n    const onChangeInput = () => {\n        setIsSelectAddress(false)\n        setErrorAddress(\"\")\n        setIsEdit(false)\n        setAddress(\"\")\n    }\n    return (\n        <ThemeProvider theme={props.theme}>\n            <div>\n                <h1>Add New Address</h1>\n                <StyledTextField id=\"autocomplete\"\n                                 color=\"secondary\"\n                                 variant=\"outlined\"\n                                 type=\"text\"\n                                 onChange={onChangeInput}\n                />\n                <ErrorInputMessage> {errorAddress}</ErrorInputMessage>\n                {isSelectAddress && <div>\n                    <StyledSpan> вы выбрали разбитый по структуре адрес </StyledSpan> <Button\n                    onClick={handleRedact}><EditIcon/>редактировать</Button>\n                    {isEdit &&\n                    <InputForm setAddress={setAddress} setIsSelectAddress={setIsSelectAddress} state={state}/>}\n                </div>}\n                {address && <SuccessSnackBar text={address}/>}\n            </div>\n        </ThemeProvider>\n    )\n}\n\nexport default AutocompleteAddress;\n\n","export const getNewAddressState=(addressObject:any)=> {\n    let NewAddressState = {street: \"\", home: \"\", district: \"\", locality: \"\", area: \"\", region: \"\", country: \"\",}\n    // @ts-ignore\n    for (const component of addressObject.address_components as google.maps.GeocoderAddressComponent[]) {\n        const componentType = component.types[0];\n    switch (componentType) {\n        case \"street_number\": {\n            NewAddressState.home = component.long_name\n            break;\n        }\n        case \"route\": {\n\n            NewAddressState.street = component.long_name\n            break;\n        }\n        case \"sublocality_level_1\": {\n            NewAddressState.district = component.long_name\n            break;\n        }\n        case \"locality\": {\n            NewAddressState.locality = component.long_name\n            break;\n        }\n        case \"administrative_area_level_2\": {\n            NewAddressState.area = component.long_name\n            break;\n        }\n        case \"administrative_area_level_1\": {\n            NewAddressState.region = component.long_name\n            break;\n        }\n        case \"country\": {\n            NewAddressState.country = component.long_name\n            break;\n        }\n    }\n}\nreturn NewAddressState\n}","import React from 'react';\nimport styled from \"styled-components\";\nimport AutocompleteAddress from \"./AutocompleteAddress/AutocompleteAddress\";\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport {purple} from \"@material-ui/core/colors\";\n\n\nconst StyledApp = styled.div`\n  text-align: center;\n  \n`\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            // Purple and green play nicely together.\n            main: purple[300],\n        },\n        secondary: {\n            // This is green.A700 as hex.\n            main: '#11cb5f',\n        },\n\n    },\n});\n\n\nfunction App() {\n\n    return (\n        <StyledApp>\n            <AutocompleteAddress theme={theme} />\n        </StyledApp>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}